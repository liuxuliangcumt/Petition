package com.realpower.petition.fragment;

import android.graphics.drawable.Drawable;
import android.support.v7.widget.AppCompatButton;
import android.support.v7.widget.AppCompatEditText;
import android.support.v7.widget.AppCompatSpinner;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import com.realpower.petition.R;
import com.realpower.petition.activity.PetitionDetailActivity_;
import com.realpower.petition.activity.PetitionNewActivity_;
import com.realpower.petition.adapter.PetitionLAdapter;
import com.realpower.petition.adapter.SpinnerAdapter;
import com.realpower.petition.bean.ShuquBean;
import com.realpower.petition.net.MyCallback;
import com.realpower.petition.net.param.IdParam;
import com.realpower.petition.net.result.ShuquResult;
import com.realpower.petition.util.SystemInfoUtils;

import org.androidannotations.annotations.AfterViews;
import org.androidannotations.annotations.Click;
import org.androidannotations.annotations.EFragment;
import org.androidannotations.annotations.ViewById;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Call;


/**
 * Created by Administrator on 2017/11/9.
 */
@EFragment(R.layout.fragment_petition)
public class PetitionFragment extends BaseFragment {

    @ViewById(R.id.lv_petition)
    ListView lv_petition;
    PetitionLAdapter petitionLAdapter;
    private List<ShuquBean> datas;
    private int petitionCategory = 0;//诉求类别

    @AfterViews
    void onInitViews() {
        setTitleName("诉求");
        View view = View.inflate(getContext(), R.layout.headerview_petition, null);
        AppCompatSpinner mySpinner = (AppCompatSpinner) view.findViewById(R.id.spinner);
        AppCompatButton petition_btn = (AppCompatButton) view.findViewById(R.id.petition_btn);
        final AppCompatEditText et_petition = (AppCompatEditText) view.findViewById(R.id.et_petition);
        Drawable drawable = getResources().getDrawable(R.drawable.search);
        drawable.setBounds(0, 0, SystemInfoUtils.dp2px(getContext(), 12), SystemInfoUtils.dp2px(getContext(), 12));
        et_petition.setCompoundDrawables(drawable, null, null, null);
        datas = new ArrayList<>();
        petitionLAdapter = new PetitionLAdapter(getContext(), datas);
        lv_petition.addHeaderView(view);
        lv_petition.setAdapter(petitionLAdapter);
        lv_petition.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                PetitionDetailActivity_.intent(getContext()).petitionId(datas.get(position - 1).getAppealId()).start();
            }
        });
        petition_btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                PetitionNewActivity_.intent(getContext()).start();
            }
        });
        List<String> spinnerDate = new ArrayList<>();
        spinnerDate.add("全部");
        spinnerDate.add("待解决");
        spinnerDate.add("解决中");
        spinnerDate.add("已解决");
        SpinnerAdapter spinnerAdapter = new SpinnerAdapter(spinnerDate, getActivity());
        mySpinner.setAdapter(spinnerAdapter);
        mySpinner.setSelection(0, true);
        mySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                petitionCategory = position;
                if (position == 0) {
                    getData();
                } else {
                    searchPetition(position);
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
        et_petition.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                if (et_petition.getText().toString().length() != 0) {
                    searchPetitionByCriteria(et_petition.getText().toString() + "");
                } else {
                    getData();
                }
            }
        });

        getData();
    }

    private void searchPetitionByCriteria(String criteria) {
        Call<ShuquResult> call = apiService.searchPetitionByCriteria(new IdParam("", criteria));
        call.enqueue(new MyCallback<ShuquResult>() {
            @Override
            public void onSuccessRequest(ShuquResult result) {
                if ("1".equals(result.getStatus()))
                    setData(result.getMessage());
            }

            @Override
            public void afterRequest() {

            }

            @Override
            public void onFailureRequest(Call<ShuquResult> call, Throwable t) {

            }
        });

    }

    @Override
    public void onResume() {
        super.onResume();
        if (petitionCategory == 0) {
            getData();
        } else {
            searchPetition(petitionCategory);
        }
    }

    private void searchPetition(int position) {
        Call<ShuquResult> call = apiService.searchPetitionByStatus(new IdParam("", position + ""));
        call.enqueue(new MyCallback<ShuquResult>() {
            @Override
            public void onSuccessRequest(ShuquResult result) {
                if ("1".equals(result.getStatus()))
                    setData(result.getMessage());
            }

            @Override
            public void afterRequest() {

            }

            @Override
            public void onFailureRequest(Call<ShuquResult> call, Throwable t) {

            }
        });
    }

    private void setData(List<ShuquBean> message) {
        datas.clear();
        datas.addAll(message);
        petitionLAdapter.notifyDataSetChanged();
    }

    private void getData() {
        Call<ShuquResult> call = apiService.shuquAll();
        call.enqueue(new MyCallback<ShuquResult>() {
            @Override
            public void onSuccessRequest(ShuquResult result) {
                // Log.e("aaa", "success  " + result.toString());
                if ("2".equals(result.getDesc().getCode())) {
                    setData(result.getMessage());
                }
            }

            @Override
            public void afterRequest() {

            }

            @Override
            public void onFailureRequest(Call<ShuquResult> call, Throwable t) {
                Log.e("aaa", "failure  " + t.toString());

            }
        });
    }


    @Click({R.id.petition_btn})
    void onViewClick(View view) {
        switch (view.getId()) {
            case R.id.petition_btn:
                PetitionNewActivity_.intent(getContext()).start();
                break;
        }
    }
}
